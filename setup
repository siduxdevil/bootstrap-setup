#!/bin/sh

# WARNING !!!
# Please skip to line 165!
# Don't touch anything from here to line 164
# if you don't know what you are doing.


# Values
WD="$PWD"

TMPDIR="${TMPDIR:-/tmp}"
TEMPORARY="$TMPDIR/superb-bootstrap"

     APT_MARK='APT';      APT_COMMAND='sudo apt install --assume-yes'
  Pacman_MARK='PAC';   Pacman_COMMAND='sudo pacman --sync --refresh --noconfirm --needed'
    XBPS_MARK='XBP';     XBPS_COMMAND='sudo xbps-install --sync --yes'
     AUR_MARK='AUR';      AUR_COMMAND='paru -Sy --nodiffmenu --save --noconfirm'
 Flatpak_MARK='FLA';  Flatpak_COMMAND='sudo flatpak install'
    Snap_MARK='SNA';     Snap_COMMAND='sudo snap install'
Homebrew_MARK='HBR'; Homebrew_COMMAND='brew install'


# Functions
superbbootstrap_install_packages() {
	if [ -f "$1" ]; then
		packages_list=$(sed -e 's/#.*$//g' "$1")
	else
		printf '\n\033[1;7;31m%s\033[0m\n' 'Packages list not found'
		exit 1
	fi

	case $(uname -s | sed -e 's/[[:upper:]]/\L&/g') in
		'darwin'*)
			packagemanager_main='Homebrew'
		;;
		*)
			  if command -v apt          >/dev/null; then packagemanager_main='APT'
			elif command -v pacman       >/dev/null; then packagemanager_main='Pacman'
			elif command -v xbps-install >/dev/null; then packagemanager_main='XBPS'
			else
				printf '\n\033[1;7;31m%s\033[0m\n' "Packages manager not found"
				exit 1
			fi

			[ "$packagemanager_main"  = 'Pacman' ] && packagemanager_list="$packagemanager_list AUR"
			                                          packagemanager_list="$packagemanager_list Flatpak"
			[ "$packagemanager_main" != 'XBPS'   ] && packagemanager_list="$packagemanager_list Snap"
		;;
	esac

	packagemanager_list="$packagemanager_main${packagemanager_list:+ $packagemanager_list}"


	for packagemanager in $packagemanager_list; do
		eval "mark=\"\$${packagemanager}_MARK\""
		eval "install_command=\"\$${packagemanager}_COMMAND\""

		packages_installing=$(printf '%s' "$packages_list" | sed -e "s/^.*$mark://g" -e 's/[[:space:]].*$//g' -e '/^$/d' | tr '\n' ' ')

		[ -n "$packages_installing" ] && {
			packages_list=$(printf '%s' "$packages_list" | sed -e "s/^.*$mark.*\$//g")

			printf '\n\033[1;7;35m%s\033[0m\n' "Setting up $packagemanager"
			eval "superbbootstrap_$packagemanager"

			printf '\n\033[1;7;32m%s\033[0m\n' "Installing $packagemanager Packages"
			eval "$install_command $packages_installing"
		}
	done
}

superbbootstrap_APT() {
	sudo apt update  --assume-yes
	sudo apt upgrade --assume-yes
}

superbbootstrap_Pacman() {
	sudo pacman --sync --sysupgrade --refresh --noconfirm --needed
}

superbbootstrap_XBPS() {
	sudo xbps-install --sync --yes --update
	sudo xbps-install --sync --yes --update
	sudo xbps-install --sync --yes void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree void-repo-debug
}

superbbootstrap_AUR() {
	sudo pacman --sync --refresh --noconfirm --needed git base-devel
	git clone 'https://aur.archlinux.org/paru.git' "$TEMPORARY/paru"
	cd "$TEMPORARY/paru" || exit 1
	makepkg -si
	cd "$WD" || exit 1
}

superbbootstrap_Flatpak() {
	case "$packagemanager_main" in
	'Pacman') sudo pacman --sync --refresh --noconfirm --needed flatpak           ;;
	'APT')    sudo apt install --assume-yes flatpak gnome-software-plugin-flatpak ;;
	'XBPS')   sudo xbps-install --sync --yes flatpak                              ;;
	esac

	flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
}

superbbootstrap_Snap() {
	if [ $packagemanager_main = 'Pacman' ]; then
		sudo pacman --sync --refresh --noconfirm --needed git
		git clone 'https://aur.archlinux.org/snapd.git' "$TEMPORARY/snap"
		cd "$TEMPORARY/snap" || exit 1
		makepkg -si
		cd "$WD" || exit 1
		sudo systemctl enable --now snapd.socket
		sudo ln -s '/var/lib/snapd/snap' '/snap'
	elif [ $packagemanager_main = 'APT' ]; then
		sudo apt install --assume-yes snapd
	fi

	snap install core
}

superbbootstrap_Homebrew() {
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

superbbootstrap_batch_symlink() {
	batch_symlink_directory="$1"
	batch_symlink_target="$2"

	[ -n "$TRASH_PATH" ] && mkdir -p "$TRASH_PATH"

	if [ -d "$1" ]; then
		superbbootstrap_scan_directory "$batch_symlink_directory"
	else
		printf '\n\033[1;7;31m%s\033[0m\n' "'$batch_symlink_directory' not found"
	if
}

superbbootstrap_scan_directory() {
	[ -d "$1" ] || exit 1

	for file in "$1"/.* "$1"/*; do
		[ "$file" = "$1/." ] || [ "$file" = "$1/.." ] || [ "$file" = "$1/*" ] && continue

		target="$batch_symlink_target${file#$batch_symlink_directory}"

		if [ -e "$target" ]; then
			if [ -d "$target" ] && [ ! -h "$target" ]; then
				superbbootstrap_scan_directory "$file"
			else
				if [ -n "$TRASH_PATH" ]; then
					mv -f "$target" "$TRASH_PATH"
				else
					rm "$target"
				fi && ln -sf "$file" "$target"
			fi
		else
			ln -sf "$file" "$target"
		fi
	done
}


###############################################################################

#    ____    __
#   / __/__ / /___ _____
#  _\ \/ -_) __/ // / _ \
# /___/\__/\__/\_,_/ .__/
#                 /_/

# Add description here:
# > Hello World!
# > This is my setup script.


# Values
DOTFILES_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

#. "$DOTFILES_PATH/home/.config/env" # Get your environment variables if you have

STEPS="${*:-install before home root after}" # Default order of steps

#TRASH_PATH="${XDG_DATA_HOME:-$HOME/.local/share}/Trash/files" # Uncomment this if you want to move conflict files to trash instead of delete it


# Functions
install_packages() {
	printf '\n\033[1;7;34m%s\033[0m\n' 'Install packages'
	superbbootstrap_install_packages "$DOTFILES_PATH/packageslist" # you can change packageslist's path here

	# Add more packages that you want to install here
	#printf '\n\033[1;7;34m%s\033[0m\n' 'Install extra packages'
	#pip install --upgrade 'git+https://github.com/will8211/unimatrix.git'
}

symlink_home() {
	printf '\n\033[1;7;36m%s\033[0m\n' "Symlink to home ($HOME)"

	superbbootstrap_batch_symlink "$DOTFILES_PATH/home" "$HOME"

	# Use this if you want to batch symlink with bsymlink
	#bsymlink "$DOTFILES_PATH/home" "$HOME"

	# Use this if you want to batch symlink with stow (you must cd to the directory that contain this setup file)
	#stow -vt ~ home
}

symlink_root() {
	printf '\n\033[1;7;36m%s\033[0m\n' 'Symlink to root (/)'

	sudo superbbootstrap_batch_symlink "$DOTFILES_PATH/root" '/'

	# Use this if you want to batch symlink with bsymlink
	#sudo bsymlink "$DOTFILES_PATH/root" '/'

	# Use this if you want to batch symlink with stow (you must cd to the directory that contain this setup file)
	#sudo stow -vt / root
}

before_symlink() {
	printf '\n\033[1;7;33m%s\033[0m\n' 'Before symlink step'

	# Remove files that may conflict when symlink dotfiles
	rm .bashrc

	# Remove conflicting items in $HOME/.config
	[ -d "$HOME/.config" ] && for config_directory_path in "$HOME/.config/."* "$HOME/.config/"*; do
		config_directory_name="${config_directory_path#$XDG_CONFIG_HOME/}"

		if [ "$config_directory_name" != '.' ] && [ "$config_directory_name" != '..' ] && [ -e "$HOME/dots/home/.config/$config_directory_name" ]; then
			rm "$config_directory_path"
		fi
	done

	# Create directories (to symlink files inside only, not the directory itself)
	mkdir "$HOME/.config" "$HOME/.local/share" "$HOME/.local/bin" "$HOME/.cache"
}

after_symlink() {
	printf '\n\033[1;7;33m%s\033[0m\n' 'After symlink step'

	# Change default shell
	chsh -s '/usr/bin/bash'

	# Enable firewall
	sudo ufw enable
}


# Start
for step_check in $STEPS; do
	case "$step_check" in
		'i'|'install') steps_list="${steps_list:+$steps_list; }install_packages" ;;
		'b'|'before')  steps_list="${steps_list:+$steps_list; }before_symlink"   ;;
		'h'|'home')    steps_list="${steps_list:+$steps_list; }symlink_home"     ;;
		'r'|'root')    steps_list="${steps_list:+$steps_list; }symlink_root"     ;;
		'a'|'after')   steps_list="${steps_list:+$steps_list; }after_symlink"    ;;
		*)
			printf '\n\033[1;7;31m%s\033[0m\n' "Step '$step_check' not found"
			exit 1
		;;
	esac
done

eval "$steps_list"


exit 0
